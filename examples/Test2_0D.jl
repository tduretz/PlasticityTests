using PlasticityTests, Plots, LinearAlgebra

function main()

    # Data
    Test2 = ExtractDataTest2()

    # MC params
    ฯ  = 40.0*ฯ/180.
    ฯ  = 10.0*ฯ/180.
    G  = 1e7
    c  = 0.

    ๐แต  = [2G 0 0; 0 2G 0; 0 0 G]

    ฮณtot  = 0.1
    nt    = 1000
    ฮฮณxy  = ฮณtot/nt

    ฮธ_A = ฯ/4 + 0.25*(ฯ + ฯ)
    ฮธ_C = ฯ/4 + 0.5*ฯ
    ฮธ_R = ฯ/4 + 0.5*ฯ

    ฮธ_SB = ฮธ_A

    ฯh = -100e3
    ฯv = (1 + sin(ฯ)) / (1 - sin(ฯ)) * ฯh*0.99999999

    # to Cartesian
    ฯxx_o = 1/2*(ฯh + ฯv) +  1/2*(ฯh - ฯv)*cos(2*ฮธ_SB)
    ฯyy_o = 1/2*(ฯh + ฯv) -  1/2*(ฯh - ฯv)*cos(2*ฮธ_SB)
    ฯxy_o = 1/2*(ฯh - ฯv)*sin(2*ฮธ_SB)

    ฯxx_i = 1/2*(ฯh + ฯv) +  1/2*(ฯh - ฯv)*cos(2*ฮธ_SB)
    ฯyy_i = 1/2*(ฯh + ฯv) -  1/2*(ฯh - ฯv)*cos(2*ฮธ_SB)
    ฯxy_i = 1/2*(ฯh - ฯv)*sin(2*ฮธ_SB)
    ฯ_i   = [ฯxx_i; ฯyy_i; ฯxy_i]

    load = zeros(nt)

    # Compute fist angle inside
    ฯ_i  = [ฯxx_i; ฯyy_o; ฯxy_o]
    ฯ_i  = sqrt(0.25*(ฯ_i[1]-ฯ_i[2])^2 + ฯ_i[3]^2)
    ฮธ_i  = 0.5*acos((ฯ_i[1]-ฯ_i[2])/2/ฯ_i)

    for it=1:nt

        # Update angle inside
        ฮธ    = ฮธ_i

        # Stress integration
        ๐    = G.*[ cos(2ฮธ) + sin(ฯ)
                   -cos(2ฮธ) + sin(ฯ) 
                    sin(2ฮธ)         ] 
        ๐    = G.*[ cos(2ฮธ) + sin(ฯ)
                   -cos(2ฮธ) + sin(ฯ) 
                    sin(2ฮธ)         ] 
        d    = G*(1 + sin(ฯ)*sin(ฯ))
        ๐   = ๐แต + 1/d*๐*๐'
        
        # Update vertical load
        ฮฑ    = 1/2*(1. + cos(2*ฮธ_SB) - (1. - cos(2*ฮธ_SB)*๐[2,1]/2/G))
        ฮฒ    = 1/2*(   - sin(2*ฮธ_SB) - (1. - cos(2*ฮธ_SB)*๐[3,1]/2/G))
        A    = G^2*(cos(2*ฮธ) + sin(ฯ)) * (cos(2*ฮธ) + sin(ฯ))           *10 # YURY: Factor 10 ?????      
        B    = (1 + sin(ฯ)*sin(ฯ)) * (ฮฒ*๐[2,2] + ฮฑ*๐[3,2])
        ฮ    = A/B       # should be equivalent to Laeti's paper
        ฮฯv  = ฮ * ฮฮณxy
        ฯv  += ฮฯv

        # Back to Cartesian coordinates 
        ฯxx_o  = 1/2*(ฯh + ฯv) +  1/2*(ฯh - ฯv)*cos(2*ฮธ_SB)
        ฯyy_o  = 1/2*(ฯh + ฯv) -  1/2*(ฯh - ฯv)*cos(2*ฮธ_SB)
        ฯxy_o  =                  1/2*(ฯh - ฯv)*sin(2*ฮธ_SB)

        # Solve for ฯxx inside the shear band using yield condition
        ฯyy_i  = ฯyy_o
        ฯxy_i  = ฯxy_o
        ฯxx_i = -ฯyy_i + 2.0 * ฯyy_i ./ cos(ฯ) .^ 2 + 2.0 * sqrt(ฯxy_i .^ 2 .* sin(ฯ) .^ 2 - ฯxy_i .^ 2 + ฯyy_i .^ 2 .* sin(ฯ) .^ 2) ./ cos(ฯ) .^ 2        
        
        # ฯxx_i  = ฯxx_o
        # ฯyy_i  = ฯyy_o
        # ฯxy_i  = ฯxy_o
        # ฯ_i    = [ฯxx_i; ฯyy_o; ฯxy_o]
        # ฯ_i    = sqrt(0.25*(ฯ_i[1]-ฯ_i[2])^2 + ฯ_i[3]^2)
        # f      = ฯ_i + 0.5*(ฯ_i[1]+ฯ_i[2])*sin(ฯ)
        # fc     = f
        # for iter=1:500
        #     ฯ_i   .= [ฯxx_i; ฯyy_o; ฯxy_o]
        #     ฯ_i    = sqrt(0.25*(ฯ_i[1]-ฯ_i[2])^2 + ฯ_i[3]^2)
        #     fc     = ฯ_i + 0.5*(ฯ_i[1]+ฯ_i[2])*sin(ฯ)
        #     ฯxx_i -= fc
        #     if abs(fc)<1e-8 break end
        # end

        # Compute new angle
        ฯ_i  = [ฯxx_i; ฯyy_o; ฯxy_o]
        ฯ_i  = sqrt(0.25*(ฯ_i[1]-ฯ_i[2])^2 + ฯ_i[3]^2)
        ฮธ_i  = 0.5*acos((ฯ_i[1]-ฯ_i[2])/2/ฯ_i)

        # ----------- Postprocessing -----------

        # MC out
        ฯzz_o = 1/2*(ฯxx_o + ฯyy_o)
        ฯ     = [ฯxx_o ฯxy_o 0; ฯxy_o ฯyy_o 0; 0 0 ฯzz_o]
        sp    = eigvals(ฯ) 
        ฯ1_o  = sp[1]  
        ฯ3_o  = sp[3]  

        # MC in
        ฯzz_i = 1/2*(ฯxx_i + ฯyy_i)
        ฯ     = [ฯxx_i ฯxy_i 0; ฯxy_i ฯyy_i 0; 0 0 ฯzz_i]
        sp    = eigvals(ฯ) 
        ฯ1_i  = sp[1]  
        ฯ3_i  = sp[3]

        ฮธmc   = LinRange(-ฯ, 0, 100)
        ฯMC   = LinRange(-500, 0, 100 ) .*1e3
        ฯMC   = -ฯMC.*tan(ฯ) .+ c
        yield = (x = ฯMC./1e3, y = ฯMC./1e3)
        ฯA    = (ฯ1_o - ฯ3_o)/2
        PA    = (ฯ1_o + ฯ3_o)/2
        ฯB    = (ฯ1_i - ฯ3_i)/2
        PB    = (ฯ1_i + ฯ3_i)/2
        MC_A  = (x = (ฯA.*cos.(ฮธmc) .+ PA)./1e3, y = (ฯA.*sin.(ฮธmc))./1e3) 
        MC_B  = (x = (ฯB.*cos.(ฮธmc) .+ PB)./1e3, y = (ฯB.*sin.(ฮธmc))./1e3)

        load[it] = ฯv/ฯh

        if mod(it,100)==0
            p1 = plot(title="Test 1 Mohr circles", ylabel="ฯ", xlabel="ฯโ", size=(300,300), aspect_ratio=1)
            p1 = plot!( MC_A... , color=:blue, label="Case A" )
            p1 = plot!( MC_B...,  color=:green, label="Case B"  )
            p1 = plot!( yield..., color=:red, label="Yield"  )
            p2 = plot((1:it).*ฮฮณxy*100, load[1:it])
            p2 = scatter!(Test2.StressRatioArthur.x, Test2.StressRatioArthur.y)
            # p2 = scatter!(Test2.StressRatioCoulomb.x, Test2.StressRatioCoulomb.y)
            display(plot(p1, p2))
            sleep(0.1)
        end
    end
end

main()